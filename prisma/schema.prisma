// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  // Optional: Define a custom output path if needed
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  VIEWER
  EDITOR
}

// Roadmap Models
model Milestone {
  id    String @id @default(cuid())
  title String
  date  DateTime
  items RoadmapItem[] // Relation to RoadmapItem

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoadmapItem {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime // Consider if this date is still needed or derived from milestone?
  category    String
  status      String   // Consider using an enum for status
  
  milestoneId String
  milestone   Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)

  // New multi-select fields
  pirateMetrics    String[] @default([]) // Store selected Pirate Metrics
  northStarMetrics String[] @default([]) // Store selected North Star Metrics
  relevantLinks    String[] @default([]) // Store relevant links
  productDRI       String?   @default("") // Product DRI (Directly Responsible Individual)

  createdById String?
  createdBy   User?   @relation("CreatedItems", fields: [createdById], references: [id])

  updatedById String?
  updatedBy   User?   @relation("UpdatedItems", fields: [updatedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- Add Many-to-Many self-relation ---
  relatedItems RoadmapItem[] @relation("RelatedItems")
  relatedTo    RoadmapItem[] @relation("RelatedItems")
  // -----------------------------------------

  @@index([milestoneId])
  @@index([createdById])
  @@index([updatedById])
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          Role         @default(VIEWER) // Default role is VIEWER
  accounts      Account[]
  sessions      Session[]
  createdItems  RoadmapItem[] @relation("CreatedItems")
  updatedItems  RoadmapItem[] @relation("UpdatedItems")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
